{"version":3,"sources":["index.tsx"],"names":["React","Keyboard","ViewPager","Animated","AnimatedViewPager","createAnimatedComponent","event","add","ViewPagerBackend","enterListeners","jumpToIndex","index","ref","current","getNode","setPage","jumpTo","key","props","navigationState","keyboardDismissMode","onIndexChange","routes","findIndex","route","dismiss","addListener","type","listener","push","removeListener","indexOf","splice","currentIndex","Value","offset","justScrolled","onPageScroll","nativeEvent","position","onPageScrollStateChanged","state","onSwipeEnd","onSwipeStart","createRef","prevProps","newPosition","style","swipeEnabled","children","orientation","transition","showPageIndicator","pageMargin","overdrag","overScrollMode","render","flex","e","Component","defaultProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Keyboard, StyleProp, ViewStyle } from 'react-native';\nimport ViewPager from 'react-native-pager-view';\nimport Animated from 'react-native-reanimated';\n\nimport {\n  NavigationState,\n  Route,\n  Listener,\n  PagerCommonProps,\n  EventEmitterProps,\n} from 'react-native-tab-view/src/types';\n\nconst AnimatedViewPager = Animated.createAnimatedComponent(ViewPager);\n\ntype Props<T extends Route> = PagerCommonProps & {\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  children: (\n    props: EventEmitterProps & {\n      // Animated value which represents the state of current index\n      // It can include fractional digits as it represents the intermediate value\n      position: Animated.Node<number>;\n      // Function to actually render the content of the pager\n      // The parent component takes care of rendering\n      render: (children: React.ReactNode) => React.ReactNode;\n      // Callback to call when switching the tab\n      // The tab switch animation is performed even if the index in state is unchanged\n      jumpTo: (key: string) => void;\n    }\n  ) => React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  orientation?: 'vertical' | 'horizontal';\n  transition?: 'scroll' | 'curl';\n  showPageIndicator?: boolean;\n  pageMargin?: number;\n  overdrag?: boolean;\n  overScrollMode?: 'always' | 'never' | 'auto';\n};\n\nconst { event, add } = Animated;\n\nexport default class ViewPagerBackend<T extends Route> extends React.Component<\n  Props<T>\n> {\n  static defaultProps = {\n    onIndexChange: () => {},\n    swipeEnabled: true,\n  };\n\n  componentDidUpdate(prevProps: Props<T>) {\n    if (\n      prevProps.navigationState.index !== this.props.navigationState.index &&\n      !this.justScrolled\n    ) {\n      this.jumpToIndex(this.props.navigationState.index);\n    }\n    this.justScrolled = false;\n  }\n\n  private enterListeners: Listener[] = [];\n\n  private jumpToIndex = (index: number) => {\n    // If the index changed, we need to trigger a tab switch\n    // this.isSwipeGesture.setValue(FALSE);\n    this.ref.current.getNode().setPage(index);\n  };\n\n  private jumpTo = (key: string) => {\n    const { navigationState, keyboardDismissMode, onIndexChange } = this.props;\n    const index = navigationState.routes.findIndex(\n      (route: { key: string }) => route.key === key\n    );\n\n    // A tab switch might occur when we're in the middle of a transition\n    // In that case, the index might be same as before\n    // So we conditionally make the pager to update the position\n    if (navigationState.index !== index) {\n      onIndexChange(index);\n      this.jumpToIndex(index);\n\n      // When the index changes, the focused input will no longer be in current tab\n      // So we should dismiss the keyboard\n      if (keyboardDismissMode === 'auto') {\n        Keyboard.dismiss();\n      }\n    }\n  };\n\n  private addListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter':\n        this.enterListeners.push(listener);\n        break;\n    }\n  };\n\n  private removeListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter': {\n        const index = this.enterListeners.indexOf(listener);\n\n        if (index > -1) {\n          this.enterListeners.splice(index, 1);\n        }\n\n        break;\n      }\n    }\n  };\n\n  private currentIndex = new Animated.Value(this.props.navigationState.index);\n  private offset = new Animated.Value(0);\n  private justScrolled = false;\n\n  private onPageScroll = event([\n    {\n      nativeEvent: {\n        position: this.currentIndex,\n        offset: this.offset,\n      },\n    },\n  ]);\n\n  onPageScrollStateChanged = (state: 'Idle' | 'Dragging' | 'Settling') => {\n    switch (state) {\n      case 'Settling':\n        this.props.onSwipeEnd && this.props.onSwipeEnd();\n        return;\n      case 'Dragging':\n        this.props.onSwipeStart && this.props.onSwipeStart();\n        return;\n    }\n  };\n\n  private onIndexChange(newPosition: number) {\n    if (newPosition !== this.props.navigationState.index) {\n      // assuming gesture\n      this.justScrolled = true;\n    }\n    this.props.onIndexChange(newPosition);\n  }\n\n  ref = React.createRef<any>();\n\n  render() {\n    const {\n      style,\n      keyboardDismissMode,\n      swipeEnabled,\n      children,\n      orientation,\n      transition,\n      showPageIndicator,\n      pageMargin,\n      overdrag,\n      overScrollMode,\n    } = this.props;\n\n    return children({\n      position: add(this.currentIndex, this.offset),\n      addListener: this.addListener,\n      removeListener: this.removeListener,\n      jumpTo: this.jumpTo,\n      render: children => (\n        <AnimatedViewPager\n          ref={this.ref}\n          lazy={false}\n          style={[{ flex: 1 }, style]}\n          initialPage={this.props.navigationState.index}\n          keyboardDismissMode={\n            // ViewPager does not accept auto mode\n            keyboardDismissMode === 'auto' ? 'on-drag' : keyboardDismissMode\n          }\n          onPageScroll={this.onPageScroll}\n          onPageSelected={(e: { nativeEvent: { position: number } }) =>\n            this.onIndexChange(e.nativeEvent.position)\n          }\n          onPageScrollStateChanged={this.onPageScrollStateChanged}\n          scrollEnabled={swipeEnabled}\n          orientation={orientation}\n          transitionStyle={transition}\n          showPageIndicator={showPageIndicator}\n          pageMargin={pageMargin}\n          overdrag={overdrag}\n          overScrollMode={overScrollMode}\n        >\n          {children}\n        </AnimatedViewPager>\n      ),\n    });\n  }\n}\n"]}